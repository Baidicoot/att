Axiom nat : Type.
Axiom Z : nat.
Axiom S : nat -> nat.

Axiom rec_nat : forall (P: nat -> Type), (P Z) -> (forall (n: nat), (P n) -> P (S n)) -> forall (n: nat), P n.

Reduction (P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n))
    (rec_nat P z sn Z) := z.

Reduction (P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n)) (n: nat)
    (rec_nat P z sn (S n)) := sn n (rec_nat P z sn n).

Unfolding rec_nat.

Axiom fin : nat -> Type.
Axiom finZ : forall (n: nat), fin (S n).
Axiom finS : forall (n: nat), (fin n) -> fin (S n).

Axiom rec_fin :
    forall (P: forall (n: nat), (fin n) -> Type),
    (forall (n: nat), P (S n) (finZ n)) ->
    (forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f)) ->
    forall (n: nat) (f: fin n), P n f.

Reduction
    (P: forall (n: nat), (fin n) -> Type)
    (z: forall (n: nat), P (S n) (finZ n))
    (s: forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f))
    (n: nat)
    (rec_fin P z s (S n) (finZ n)) := z n.
Reduction
    (P: forall (n: nat), (fin n) -> Type)
    (z: forall (n: nat), P (S n) (finZ n))
    (s: forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f))
    (n: nat)
    (f: fin n)
    (rec_fin P z s (S n) (finS n f)) := s n f (rec_fin P z s n f).

Unfolding rec_fin.

Definition absurd := forall (a: Type), a.

Definition not_fin_z :=
    (rec_fin
        (fun n _ => rec_nat (fun _ => Type) absurd (fun _ _ => nat) n)
        (fun _ => Z)
        (fun _ _ _ => Z)
        Z) : (fin Z) -> absurd.

Compute rec_nat (fun _ => nat) Z (fun _ p => S (S p)) 12.