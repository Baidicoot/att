Axiom nat : Type.
Axiom Z : nat.
Axiom S : nat -> nat.

Axiom rec_nat : forall (P: nat -> Type), (P Z) -> (forall (n: nat), (P n) -> P (S n)) -> forall (n: nat), P n.

(* `Reduction (args) (redex) := exp` defines a ρ-reduction rule for `redex` *)
Reduction ((P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n)))
    (rec_nat P z sn Z) := z.

Reduction ((P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n)) (n: nat))
    (rec_nat P z sn (S n)) := sn n (rec_nat P z sn n).

Definition double := rec_nat (fun _ => nat) Z (fun _ n => S (S n)).

(* `Compute O with I` attempts to fit I to O by performing δ- and ρ-reductions *)
Compute (S (S (S (S Z)))) with double (S (S Z)).
(* Ok. *)

Axiom fin : nat -> Type.
Axiom finZ : forall (n: nat), fin (S n).
Axiom finS : forall (n: nat), (fin n) -> fin (S n).

Axiom rec_fin :
    forall (P: forall (n: nat), (fin n) -> Type),
    (forall (n: nat), P (S n) (finZ n)) ->
    (forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f)) ->
    forall (n: nat) (f: fin n), P n f.

Reduction
    ((P: forall (n: nat), (fin n) -> Type)
    (z: forall (n: nat), P (S n) (finZ n))
    (s: forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f))
    (n: nat))
    (rec_fin P z s (S n) (finZ n)) := z n.
Reduction
    ((P: forall (n: nat), (fin n) -> Type)
    (z: forall (n: nat), P (S n) (finZ n))
    (s: forall (n: nat) (f: fin n), (P n f) -> P (S n) (finS n f))
    (n: nat)
    (f: fin n))
    (rec_fin P z s (S n) (finS n f)) := s n f (rec_fin P z s n f).

(* 'recursive' function that accepts any `x: fin n` and returns `finZ m` where (S m) = n *)
Definition zeroify := rec_fin
    (fun (n: nat) (f: fin n) => fin n)
    (fun (n: nat) => finZ n)
    (fun (n: nat) (_ _: fin n) => finZ n).

Compute (finZ (S Z)) with zeroify (S (S Z)) (finS (S Z) (finZ Z)).
(* Ok. *)

(* `fin Z` can fill the role of the `0` type *)
Definition absurd := forall (a: Type), a.

Definition if_z_absurd_else_nat := rec_nat (fun _ => Type) absurd (fun _ _ => nat).

Definition fin_Z_absurd := fun (H: fin Z) =>
    (rec_fin
        (fun n _ => if_z_absurd_else_nat n)
        (fun _ => Z)
        (fun _ _ _ => Z)
        Z
        H) : absurd.

Check fin_Z_absurd.
(* Has type (fin Z) -> absurd. *)

Definition bool := fin (S (S Z)).
Definition tt := (finZ (S Z)) : bool.
Definition ff := (finS (S Z) (finZ Z)) : bool.

Definition True := fin (S Z).
Definition I := (finZ Z) : True.
Definition False := fin Z.

(* equality - needed to prove facts about vector maps *)
Axiom Eq : forall (A: Type) (x y: A), Type.
Axiom Eq_refl : forall (A: Type) (x: A), Eq A x x.
Axiom Eq_rec : forall (A: Type) (P: A -> Type) (x y: A), (Eq A x y) -> (P x) -> (P y).

Definition cast := fun (A B: Type) (H: Eq Type A B) (a: A) => Eq_rec Type (fun (T: Type) => T) A B H a.
Definition eq_apply := fun (A B: Type) (P: A -> B) (x y: A) (H: Eq A x y) =>
    Eq_rec A (fun (y: A) => Eq B (P x) (P y)) x y H (Eq_refl B (P x)).

(* Σ-types - existential quantifiers *)
Axiom Σ : forall (A: Type) (P: A -> Type), Type.
Axiom ∃ : forall (A: Type) (P: A -> Type) (a: A), (P a) -> (Σ A P).

(* this is slightly obtuse, but in-line with what would be generated *)
Axiom rec_Σ :
    forall (A: Type) (B: A -> Type)
        (P: (Σ A B) -> Type),
        (forall (x: A) (y: B x), P (∃ A B x y))
        -> forall (p: Σ A B), P p.

Reduction
    ((A: Type) (B: A -> Type)
    (P: (Σ A B) -> Type)
    (f: forall (x: A) (y: B x), P (∃ A B x y))
    (x: A) (y: B x))
    (rec_Σ A B P f (∃ A B x y)) := f x y.

Definition fst := fun (A: Type) (B: A -> Type) => rec_Σ A B (fun _ => A) (fun x _ => x).

(* polymorphic vectors of polymorphic size *)
Axiom Vec : Type -> nat -> Type.
Axiom vcons : forall (T: Type) (n: nat) (v: Vec T n), T -> Vec T (S n).
Axiom vnil : forall (T: Type), Vec T Z.

Axiom rec_vec :
    forall
        (T: Type) (P: forall (n: nat), (Vec T n) -> Type),
        (P Z (vnil T)) -> (forall (n: nat) (v: Vec T n) (t: T), (P n v) -> P (S n) (vcons T n v t)) ->
        forall (n: nat) (v: Vec T n), P n v.

Reduction
    ((T: Type) (P: forall (n: nat), (Vec T n) -> Type)
    (z: P Z (vnil T))
    (s: forall (n: nat) (v: Vec T n) (t: T), (P n v) -> P (S n) (vcons T n v t))
    (n: nat) (v: Vec T n) (t: T))
    (rec_vec T P z s (S n) (vcons T n v t)) := s n v t (rec_vec T P z s n v).
Reduction
    ((T: Type) (P: forall (n: nat), (Vec T n) -> Type)
    (z: P Z (vnil T))
    (s: forall (n: nat) (v: Vec T n) (t: T), (P n v) -> P (S n) (vcons T n v t)))
    (rec_vec T P z s Z (vnil T)) := z.

Definition vmap := fun (T X: Type) (f: T -> X) =>
    rec_vec T (fun m _ => Vec X m) (vnil X) (fun n _ t v => vcons X n v (f t)).

(* `V n R` is a tree with `n` constructors each having `R _` subtrees *)
Axiom V : forall (n: nat) (R: (fin n) -> nat), Type.
Axiom sup : forall (n: nat) (R: (fin n) -> nat) (f: fin n), (Vec (V n R) (R f)) -> V n R.
Axiom V_rec : forall (n: nat) (R: (fin n) -> nat) (P: (V n R) -> Type),
    (forall (f: fin n) (s: Vec (Σ (V n R) P) (R f)),
        P (sup n R f (vmap (Σ (V n R) P) (V n R) (fst (V n R) P) (R f) s))) ->
    forall (v: V n R), P v.

Axiom admit : forall (a: Type), a.

Reduction ((n: nat) (R: (fin n) -> nat) (P: (V n R) -> Type)
    (s: forall (f: fin n) (s: Vec (Σ (V n R) P) (R f)),
        P (sup n R f (vmap (Σ (V n R) P) (V n R) (fst (V n R) P) (R f) s)))
    (c: fin n) (ts: Vec (V n R) (R c)))
    (V_rec n R P s (sup n R c ts)) :=
        Eq_rec (V n R)
            P
            (sup n R c
                (vmap (Σ (V n R) P) (V n R) (fst (V n R) P) (R c)
                    (vmap (V n R) (Σ (V n R) P)
                    (fun v => ∃ (V n R) P v (V_rec n R P s v))
                    (R c) ts)))
            (sup n R c ts)
                (eq_apply (Vec (V n R) (R c)) (V n R) (sup n R c)
                    (vmap (Σ (V n R) P) (V n R) (fst (V n R) P) (R c)
                        (vmap (V n R) (Σ (V n R) P) (fun a => ∃ (V n R) P a (V_rec n R P s a)) (R c) ts))
                        (* need to prove that vmap unpair ∘ vmap pair = id *)
                    ts (admit (Eq (Vec (V n R) (R c))
                        (vmap (Σ (V n R) P) (V n R) (fst (V n R) P) (R c)
                            (vmap (V n R) (Σ (V n R) P) (fun a => ∃ (V n R) P a (V_rec n R P s a)) (R c) ts))
                        ts)))
            (s c
            (vmap (V n R) (Σ (V n R) P)
            (fun v => ∃ (V n R) P v (V_rec n R P s v))
            (R c) ts)).

Definition iif := fun (x: bool) (A: Type) (a b: A) =>
    rec_fin (fun _ _ => A) (fun _ => a) (fun _ _ _ => b) (S (S Z)) x.

Definition ℕ_cons := fun (x: bool) => iif x nat (S Z) Z.
Definition ℕ := V (S (S Z)) ℕ_cons.
Definition suc := (sup (S (S Z)) ℕ_cons tt) : (Vec ℕ (S Z)) -> ℕ.
Definition zro := (sup (S (S Z)) ℕ_cons ff) : (Vec ℕ Z) -> ℕ.