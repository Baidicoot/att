Definition En := Type.

Inductive NatTag : En :=
| `succ : NatTag
| `zero : NatTag.

Inductive desc : Type :=
| `1 : desc
| `Σ : forall (U: Type), (U -> desc) -> desc
| `ind× : desc -> desc.

Inductive unit : Type := I : unit.
Inductive Σ (A: Type) (B: A -> Type) : Type := pair : forall (a: A), (B a) -> Σ A B.

Transparent rec_desc.

Definition interp := fun (d: desc) (X: Type) =>
    rec_desc (fun _ => Type) (fun _ p => Σ X (fun _ => p)) (fun U _ F => Σ U F) unit d.

(* μ/con does not satisfy the positivity check *)
Axiom μ : desc -> Type.
Axiom con : forall (D: desc), (interp D (μ D)) -> μ D.

Axiom uncon : forall (D: desc), (μ D) -> interp D (μ D).
Reduction (D: desc) (d: interp D (μ D)) (uncon D (con D d)) := d.

Transparent uncon.

Inductive All (X: Type) (P: X -> Type) : forall (D: desc), (interp D X) -> Type :=
| all_1 : All X P `1 I
| all_ind× : forall (D: desc) (st: interp D X), (All X P D st) ->
    forall (x: X), (P x) -> All X P (`ind× D) (pair X (fun _ => interp D X) x st)
| all_Σ : forall (U: Type) (F: U -> desc) (u: U) (st: interp (F u) X),
    (All X P (F u) st) -> All X P (`Σ U F) (pair U (fun u => interp (F u) X) u st).

Definition all := fun (X: Type) (P: X -> Type) (p: forall (x: X), P x) (D: desc) (d: interp D X) =>
    rec_desc (fun D => forall (d: interp D X), All X P D d)
        (fun ST p_st d => rec_Σ X (fun _ => interp ST X)
            (fun d => All X P (`ind× ST) d) (fun x st => all_ind× X P ST st (p_st st) x (p x)) d)
        (fun U F f d => rec_Σ U (fun u => interp (F u) X)
            (fun d => All X P (`Σ U F) d) (fun u st => all_Σ X P U F u st (f u st)) d)
        (fun (a: unit) => rec_unit (fun a => All X P `1 a) (all_1 X P) a)
        D d.

Axiom ind : forall (D: desc) (P: (μ D) -> Type),
    (forall (d: interp D (μ D)), (All (μ D) P D d) -> P (con D d)) ->
        forall (x: μ D), P x.

Reduction (D: desc) (P: (μ D) -> Type)
    (m: forall (d: interp D (μ D)), (All (μ D) P D d) -> P (con D d))
    (d: interp D (μ D))
    (ind D P m (con D d)) := m d (all (μ D) P (ind D P m) D d).

Definition NatDesc := rec_NatTag (fun _ => desc) `1 (`ind× `1).

Definition NatD := `Σ NatTag NatDesc.

Definition Nat := interp NatD (μ NatD).

Definition zero := (pair NatTag
    (fun a => interp (NatDesc a) (μ NatD))
    `zero I) : Nat.

Definition succ := fun (n: Nat) => (pair NatTag
    (fun a => interp (NatDesc a) (μ NatD))
    `succ (pair (μ NatD) (fun _ => unit) (con NatD n) I)) : Nat.

(* abandoned due to exhaustion; left as an excercise to the reader *)
Definition extractProofSucc := fun (P: Nat -> Type) (n: Nat)
    (p: All (μ NatD) (fun d => P (uncon NatD d)) NatD (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) `succ
        (pair (μ NatD) (fun _ => unit) (con NatD n) I))) =>
    rec_All (μ NatD) (fun d => P (uncon NatD d))
        (fun d (e: interp d (μ NatD)) _ => _)
        _ _ _
        NatD
        (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) `succ (pair (μ NatD) (fun _ => unit) (con NatD n) I))
        p.

Definition ind_Nat := fun (P: Nat -> Type) (IHZ: P zero) (IHn: forall (n: Nat), (P n) -> P (succ n)) =>
    ind NatD (fun d => P (uncon NatD d)) (fun s p => rec_Σ NatTag (fun t => interp (NatDesc t) (μ NatD))
    (fun d => forall (p: All (μ NatD) (fun d => P (uncon NatD d)) NatD d), P d)
    (fun t b p => rec_NatTag
        (fun t => forall (b: interp (NatDesc t) (μ NatD))
            (p: All (μ NatD) (fun d => P (uncon NatD d)) NatD
                (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) t b)),
            P (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) t b))
        (fun (u: unit) _ => rec_unit
            (fun u => P (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) `zero u))
            IHZ
            u)
        (fun n p => rec_Σ (μ NatD) (fun _ => unit)
            (fun n => forall (p: All (μ NatD) (fun d => P (uncon NatD d)) NatD
            (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) `succ n)),
                P (pair NatTag (fun t => interp (NatDesc t) (μ NatD)) `succ n))
            (fun (n: μ NatD) u p => rec_unit
                (fun u =>
                    P (pair NatTag (fun d => interp (NatDesc d) (μ NatD)) `succ (pair (μ NatD) (fun d => unit) n u)))
                (rec_All (μ NatD) (fun d => P (uncon NatD d))
                _
                _ _ _ NatD
                (pair NatTag (fun d => interp (NatDesc d) (μ NatD)) `succ (pair (μ NatD) (fun d => unit) n u))
                p) u)
            n p)
        t b p)
    s p).
