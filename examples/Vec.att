Axiom nat : Type.
Axiom Z : nat.
Axiom S : nat -> nat.

Axiom rec_nat : forall (P: nat -> Type), (P Z) -> (forall (n: nat), (P n) -> P (S n)) -> forall (n: nat), P n.

Reduction (P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n))
    (rec_nat P z sn Z) := z.

Reduction (P: nat -> Type) (z: P Z) (sn: forall (n: nat), (P n) -> P (S n)) (n: nat)
    (rec_nat P z sn (S n)) := sn n (rec_nat P z sn n).

Axiom Prod : Type -> Type -> Type.
Axiom pair : forall (A B: Type), A -> B -> Prod A B.

Axiom elim_Prod : forall (A B: Type) (P: (Prod A B) -> Type),
    (forall (a: A) (b: B), P (pair A B a b))
    -> forall (p: Prod A B), P p.

Reduction (A B: Type) (a: A) (b: B) (P: (Prod A B) -> Type) (f: forall (a: A) (b: B), P (pair A B a b))
    (elim_Prod A B P f (pair A B a b)) := f a b.

Definition fst := fun (A B: Type) => elim_Prod A B (fun _ => A) (fun a _ => a).
Definition snd := fun (A B: Type) => elim_Prod A B (fun _ => B) (fun _ b => b).

Axiom Eq : forall (A: Type) (x y: A), Type.
Axiom Eq_refl : forall (A: Type) (x: A), Eq A x x.
Axiom Eq_rec : forall (A: Type) (P: A -> Type) (x y: A), (Eq A x y) -> (P x) -> (P y).

Definition cast := fun (A B: Type) (H: Eq Type A B) (a: A) => Eq_rec Type (fun (T: Type) => T) A B H a.
Definition eq_apply := fun (A B: Type) (P: A -> B) (x y: A) (H: Eq A x y) =>
    Eq_rec A (fun (y: A) => Eq B (P x) (P y)) x y H (Eq_refl B (P x)).

Definition pair_fst_snd_eq := fun (A B: Type) => elim_Prod A B
    (fun p => Eq (Prod A B) (pair A B (fst A B p) (snd A B p)) p)
    (fun a b => Eq_refl (Prod A B) (pair A B (fst A B (pair A B a b)) (snd A B (pair A B a b)))).

Axiom Unit : Type.
Axiom unit : Unit.

Axiom elim_Unit : forall (P: Unit -> Type), (P unit) -> forall (u: Unit), P u.

Reduction (P: Unit -> Type) (p: P unit)
    (elim_Unit P p unit) := p.

Definition Vec := fun (T: Type) (n: nat) => rec_nat (fun _ => Type) Unit (fun _ t => Prod T t) n.

Definition vnil := fun (T: Type) => unit : Vec T Z.
Definition vcons := fun (T: Type) (n: nat) (t: T) (v: Vec T n) => (pair T (Vec T n) t v) : Vec T (S n).

Definition rec_Vec := fun (T: Type)
    (P: forall (n: nat), (Vec T n) -> Type)
    (z: P Z (vnil T))
    (f: forall (n: nat) (t: T) (v: Vec T n), (P n v) -> P (S n) (vcons T n t v)) =>
        rec_nat (fun n => forall (v: Vec T n), P n v)
            (elim_Unit (P Z) z)
            (fun n r (v: Vec T (S n)) => cast
                (P (S n) (vcons T n (fst T (Vec T n) v) (snd T (Vec T n) v)))
                (P (S n) v)
                (eq_apply
                    (Vec T (S n))
                    Type
                    (P (S n))
                    (vcons T n (fst T (Vec T n) v) (snd T (Vec T n) v))
                    v
                    (pair_fst_snd_eq T (Vec T n) v))
                (f n (fst T (Vec T n) v) (snd T (Vec T n) v) (r (snd T (Vec T n) v)))).

Definition vmap := fun (T: Type) (X: Type) (f: T -> X) =>
    rec_Vec T (fun m _ => Vec X m) (vnil X) (fun n t _ x => vcons X n (f t) x).