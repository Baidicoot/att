Definition True := forall (P: Type), P -> P.

Definition tt := (fun (A: Type) (x: A) => x) : True.

Definition False := forall (P: Type), P.

Definition bool := forall (A: Type), A -> A -> A.

Definition true := (fun (A: Type) (x _: A) => x) : bool.

Print All.

Definition false := (fun (A: Type) (_ y: A) => y) : bool.

Definition ~ := fun (A: Type) => (A -> False) : Type.

Definition Prod := fun (A B: Type) => forall (C: Type), (A -> B -> C) -> C.

Definition DoubleNegate := fun (P: Type) (H: P) => (fun (H0: ~ P) => H0 H) : ~ (~ P).

Definition pair := fun (A B: Type) (a: A) (b: B) => (fun (C: Type) (f: A -> B -> C) => (f a) b) : Prod A B.

Definition fst := fun (A B: Type) (p: Prod A B) => (p A) (fun (x: A) (y: B) => x).
Definition snd := fun (A B: Type) (p: Prod A B) => (p B) (fun (x: A) (y: B) => y).

Definition Sum := fun (A B: Type) => forall (C: Type), (A -> C) -> (B -> C) -> C.

Definition inl := fun (A: Type) (x: A) (B: Type) => (fun (C: Type) (f: A -> C) (_: B -> C) => f x) : Sum A B.
Definition inr := fun (B: Type) (y: B) (A: Type) => (fun (C: Type) (_: A -> C) (g: B -> C) => g y) : Sum A B.

Definition Exists := fun (A: Type) (B: A -> Type) => forall (C: Type), (forall (x: A), (B x) -> C) -> C.

Definition exist := fun (A: Type) (B: A -> Type) (x: A) (p: B x) =>
    (fun (C: Type) (f: forall (x: A), (B x) -> C) => f x p) : Exists A B.

Definition Inhabited := fun (A: Type) => A.

Definition Eq := fun (A: Type) (x y: A) => forall (P: A -> Type), (P x) -> (P y).

Definition eq_refl := fun (A: Type) (x: A) => (fun (P: A -> Type) (H: P x) => H) : Eq A x x.

Definition cast := fun (x y: Type) (H: Eq Type x y) (p: x) => (H Inhabited p) : y.

Definition Neq := fun (A: Type) (x y: A) => ~ (Eq A x y).