Inductive nat : Type :=
| Z : nat
| S : nat -> nat.

Inductive tree : Type :=
| leaf : tree
| node : tree -> tree -> tree.

Inductive fin : nat -> Type :=
| finO : forall (n: nat), fin (S n)
| finS : forall (n: nat), (fin n) -> fin (S n).

Inductive vec (X: Type) : nat -> Type :=
| vnil : vec X Z
| vcons : forall (n: nat), X -> (vec X n) -> vec X (S n).

Inductive lrvec (L: Type) (R: Type) : nat -> nat -> Type :=
| lrnil : lrvec L R Z Z
| lcons : forall (a b: nat), L -> (lrvec L R a b) -> lrvec L R (S a) b
| rcons : forall (a b: nat), R -> (lrvec L R a b) -> lrvec L R a (S b).

Inductive False : Type.

Inductive True : Type := I : True.

Inductive ShallowTree (L R: Type) : nat -> Type :=
| leftLeaf : forall (n: nat), L -> ShallowTree L R n
| rightLeaf : forall (n: nat), R -> ShallowTree L R n
| branch : forall (n: nat), (ShallowTree L R n) -> (ShallowTree L R n) -> ShallowTree L R (S n).

Inductive Eq (A: Type) : A -> A -> Type :=
| Eq_refl : forall (x: A), Eq A x x.
(*
rec_Eq :
    forall (a : Type),
    forall (b : forall (c : a), forall (d : a), (Eq a c d) -> Type),
        (forall (d : b), b d d (Eq_refl a d)) ->
        forall (d : a), forall (e : a), forall (f : Eq a d e), b d e f.
*)
Definition transport := fun (A: Type) (P: A -> Type) =>
    rec_Eq A (fun c d _ => (P c) -> (P d)) (fun d (H1: P d) => H1).